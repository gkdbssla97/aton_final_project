<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.aton_final_project.model.dao.ServiceRegisterMapper">
    <!--전일대비 서비스 신청 증감률 -->
    <select id="countServiceRequest" resultType="com.example.aton_final_project.model.dto.statistics.ServiceGrowthDto">
        SELECT A.*, ROUND(((todayService - yesterdayService) / allService) * 100.0, 1) AS growth_service
        FROM (SELECT COUNT(*)                                             AS allService,
                     (SELECT COUNT(*)
                      FROM memberserviceregister
                      WHERE 1 > TIMESTAMPDIFF(DAY, registerDate, NOW()))  AS todayService,
                     (SELECT COUNT(*)
                      FROM memberserviceregister
                      WHERE 2 >= TIMESTAMPDIFF(DAY, registerDate, NOW())
                        AND TIMESTAMPDIFF(DAY, registerDate, NOW()) >= 1) AS yesterdayService
              FROM memberserviceregister) A
    </select>
    <!--서비스건 검색-->
    <sql id="searchService">
        <!--검색 키워드 있을 때-->
        <if test="keyword != null and keyword != ''">
            <choose>
                <when test="searchType != null and searchType != ''">
                    <choose>
                        <!--검색 유형 있을 때-->
                        <when test="'username'.equals(searchType)">
                            AND sr.username LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                        <when test="'companyName'.equals(searchType)">
                            AND company_name LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                        <when test="'businessNo'.equals(searchType)">
                            AND business_no LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                    </choose>
                </when>
                <!--전체 검색일 떄-->
                <otherwise>
                    AND (
                    sr.username LIKE CONCAT('%', #{keyword}, '%')
                    OR company_name LIKE CONCAT('%', #{keyword}, '%')
                    OR business_no LIKE CONCAT('%', #{keyword}, '%')
                    )
                </otherwise>
            </choose>
        </if>
    </sql>
<!--    게시글 수 카운팅-->
    <select id="count" parameterType="java.util.Map" resultType="int">
        SELECT count(*)
        FROM memberserviceregister ms
#         WHERE <include refid="searchService" />
    </select>
<!--    개인 게시글 수 카운팅-->
    <select id="count_private" parameterType="java.util.Map" resultType="int">
        SELECT count(*)
        FROM memberserviceregister ms
        WHERE member_id = #{memberId} <include refid="searchService" />
    </select>
    <!--    단건 회원신청 서비스 저장-->
    <insert id="saveServiceRegister">
        INSERT INTO memberserviceregister(username, business_no, company_name, member_id, registerDate)
        VALUES (#{memberServiceRegisterRequestDto.username}, #{memberServiceRegisterRequestDto.businessNo},
                #{memberServiceRegisterRequestDto.companyName},
                #{memberId}, #{memberServiceRegisterRequestDto.registerDate});
    </insert>
<!--    회원 서비스 신청 전체내역 조회-->
    <select id="findServiceRegisterById" resultType="com.example.aton_final_project.model.dto.MemberServiceRegisterResponseDto">
        SELECT sr.service_id      AS serviceId,
               sr.company_name    AS companyName,
               sr.business_no     AS businessNo,
               sr.service_status  AS serviceStatus,
               sr.registerDate AS registerDate,
               m.username      AS username
        FROM memberserviceregister sr
                 JOIN member m on m.member_id = sr.member_id
        where sr.member_id = #{memberId};
    </select>
    <!--    개인 서비스 신청 페이징 조회-->
    <select id="getListWithPagingForPrivate" parameterType="java.util.Map" resultType="com.example.aton_final_project.model.dto.MemberServiceRegisterResponseDto">
        SELECT sr.service_id      AS serviceId,
               sr.company_name    AS companyName,
               sr.business_no     AS businessNo,
               sr.service_status  AS serviceStatus,
               sr.registerDate AS registerDate,
               m.username      AS username
        FROM memberserviceregister sr
                 JOIN member m on m.member_id = sr.member_id
        where sr.member_id = #{memberId}

      <!-- 메서드 오버로딩으로 다른 메서드를 호출하기 위해 개인적으로 걸어놓은 조건문 -->
        <if test="serviceId neq null and serviceId neq ''.toString()">
            AND sr.service_id = #{serviceId}
        </if>

        <if test="startRow != lastPage">
            ORDER BY sr.service_id DESC
            LIMIT #{startRow}, #{rowPerPage}
        </if>
    </select>
<!--    회원 서비스 단건 ID 조회-->
    <select id="findServiceIdByMemberId" resultType="Long">
        SELECT service_id
        FROM memberserviceregister
        WHERE member_id = #{memberId}
        ORDER BY service_id DESC
        LIMIT 1;
    </select>
    <!--    회원 서비스 단건 조회-->
    <select id="findServiceByServiceId" resultType="com.example.aton_final_project.model.dto.MemberServiceRegisterResponseDto">
        SELECT s.service_id        AS serviceId,
               m.member_id         AS memberId,
               m.username          AS username,
               m.email,
               s.company_name      AS companyName,
               s.business_no       AS businessNo,
               f.filename,
               f.original_filename AS originalFileName,
               f.file_url          AS fileUrl,
               s.registerDate,
               s.completionDate,
               s.service_status AS serviceStatus,
               s.deny_reason AS denyReason
        FROM memberserviceregister s
                 JOIN member m on s.member_id = m.member_id
                 JOIN files f on s.service_id = f.service_id
        WHERE s.service_id = #{serviceId}
        ORDER BY f.file_id DESC;
    </select>
    <!--    회원 서비스 신청 전체내역 조회-->
    <select id="findAllServiceRegister" resultType="com.example.aton_final_project.model.dto.MemberServiceRegisterResponseDto">
        SELECT sr.service_id      AS serviceId,
               sr.company_name    AS companyName,
               sr.business_no     AS businessNo,
               sr.service_status  AS serviceStatus,
               sr.registerDate AS registerDate,
               m.username      AS username,
               m.email         AS email,
               m.member_id     AS memberId
        FROM memberserviceregister sr
                 JOIN member m on m.member_id = sr.member_id
        ORDER BY sr.service_id DESC
    </select>
    <!--    회원 서비스 신청 페이징 조회-->
    <select id="getListWithPaging" parameterType="java.util.Map" resultType="com.example.aton_final_project.model.dto.MemberServiceRegisterResponseDto">
        SELECT sr.service_id      AS serviceId,
               sr.company_name    AS companyName,
               sr.business_no     AS businessNo,
               sr.service_status  AS serviceStatus,
               sr.registerDate AS registerDate,
               m.username      AS username,
               m.email         AS email,
               m.member_id     AS memberId
        FROM memberserviceregister sr
                 JOIN member m on m.member_id = sr.member_id
        <include refid="searchService" />
        <!-- 메서드 오버로딩으로 다른 메서드를 호출하기 위해 개인적으로 걸어놓은 조건문 -->
        <if test="serviceId neq null and serviceId neq ''.toString()">
            AND sr.service_id = #{serviceId}
        </if>

<!--        &lt;!&ndash; 다른 메서드 호출시 반영되지 않기위해 걸어놓은 조건문 &ndash;&gt;-->
        <if test="startRow != lastPage">
            ORDER BY sr.service_id DESC
            LIMIT #{startRow}, #{rowPerPage}
        </if>
    </select>
    <select id="findMemberInfoByServiceId" resultType="com.example.aton_final_project.model.dto.AccessTokenDto">
        SELECT m.username, a.encrypt_key AS 'encryptKey', a.authorization
        FROM memberserviceregister sr
                 JOIN member m on m.member_id = sr.member_id
                 JOIN accesstoken a on m.member_id = a.member_id
        WHERE sr.service_id = #{serviceId};
    </select>
<!--    <select id="findFilesById" resultType="com.example.aton_final_project.model.dto.FilesDto">-->
<!--        SELECT filename,-->
<!--               file_url AS 'fileUrl',-->
<!--               original_filename AS 'originalFileName'-->
<!--        FROM files-->
<!--        WHERE file_id = #{fileId}-->
<!--    </select>-->
    <select id="findAllFiles" resultType="com.example.aton_final_project.model.dto.FilesDto">
        SELECT filename,
               file_url          AS 'fileUrl',
               original_filename AS 'originalFileName'
        FROM files
    </select>
    <insert id="saveFile">
        INSERT INTO files(file_url, filename, original_filename, service_id)
        VALUES (#{filesDto.fileUrl}, #{filesDto.filename}, #{filesDto.originalFileName}, #{serviceId});
    </insert>
    <update id="updateApprovalReason">
        UPDATE memberserviceregister
        SET service_status = 1,
            completionDate = #{completionDate}
        WHERE service_id = #{memberRequestDto.serviceId};
    </update>
    <update id="updateDenyReason">
        UPDATE memberserviceregister
        SET deny_reason    = #{memberServiceRegisterResponseDto.denyReason},
            service_status = 2
        WHERE service_id = #{memberServiceRegisterResponseDto.serviceId};
    </update>
    <select id="findLastServiceRegister" resultType="com.example.aton_final_project.model.dto.MemberServiceRegisterResponseDto">
        SELECT sr.service_id      AS serviceId,
               sr.company_name    AS companyName,
               sr.business_no     AS businessNo,
               sr.service_status  AS serviceStatus,
               sr.registerDate AS registerDate,
               m.username      AS username,
               m.email         AS email,
               m.member_id     AS memberId
        FROM memberserviceregister sr
                 JOIN member m on m.member_id = sr.member_id
        WHERE sr.member_id = #{memberId}
        ORDER BY sr.service_id DESC;
    </select>
</mapper>